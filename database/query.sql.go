// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteMovie = `-- name: DeleteMovie :exec
delete from movie
where id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const getMovies = `-- name: GetMovies :many
select id, title, release_date from movie
`

func (q *Queries) GetMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(&i.ID, &i.Title, &i.ReleaseDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMovie = `-- name: SaveMovie :exec
insert into movie (id, title, release_date)
values ($1, $2, $3)
on conflict(id)
do update set
  title = excluded.title,
  release_date = excluded.release_date
`

type SaveMovieParams struct {
	ID          int32
	Title       string
	ReleaseDate pgtype.Date
}

func (q *Queries) SaveMovie(ctx context.Context, arg SaveMovieParams) error {
	_, err := q.db.Exec(ctx, saveMovie, arg.ID, arg.Title, arg.ReleaseDate)
	return err
}
